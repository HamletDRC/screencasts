
Title: 
Spock and Mock Object Basics

Intro: 
Hi, my name is Hamlet D'Arcy and I work at Canoo Engineering and I'm also a JetBrains academy member. I created this screencast to show how mock objects can be used in Spock for both stubbing and mocking behavior. Spock has a simple yet powerful syntax for mocking, let's see it in action. 

Outro: 
In this screencast I've only discussed the most basics features of spock mocking. There is a lot more to it, and a great resource to learn more is my Mocking with Spock blog posts on the Canoo blog. Also, if you're new to Spock, then checkout my Spock Basics screencast, and if you're completely new to mocking in general then read my old blog post called "Mocks and Stubs aren't spies". Lastly, i've got a whole bunch more screencasts available on my JetBrains.tv and youtube channel. Check em out. 

That's it, thanks for listening. You can follow HamletDRC on twitter to see more updates like this in the future. Bye. 



Teaser: 
-------
This screencast demonstrates how to use the Spock testing specifications for mocking and stubbing behavior in unit tests. It covers creating the mock object syntax, setting expectations, verifying and spying on results, and argument matchers. 

Body: 
-----
This screencast demonstrates how to use the Spock testing specifications for mocking and stubbing behavior in unit tests. It covers creating the mock object syntax, setting expectations, verifying and spying on results, and argument matchers. 

Here are some useful links to read for this webcast: 
Spock Framework - http://code.google.com/p/spock/
Spock Basics Screencast: http://tv.jetbrains.net/videocontent/ffff
Mocks and Stubs aren't Spies: http://hamletdarcy.blogspot.com/2007/10/mocks-and-stubs-arent-spies.html
Mocking with Spocks: http://www.canoo.com/blog/2010/04/20/spock-and-test-spies-a-logical-choice/

<p>I've made a lot of screencasts and blog posts over the years. If you like this, then there are many ways to see the other stuff I've done:&nbsp;</p> 
<ul> 
    <li>My main blog:&nbsp;http://hamletdarcy.blogspot.com</li> 
    <li>My other JetBrains.tv posts:&nbsp;http://tv.jetbrains.net/tags/hamlet</li> 
    <li>IDEA&nbsp;related posts on my blog:&nbsp;http://hamletdarcy.blogspot.com/search/label/IDEA</li> 
    <li>My screencasts on YouTube:&nbsp;http://www.youtube.com/user/HamletDRC</li> 
    <li>IDEA related Posts on my work blog:&nbsp;http://www.canoo.com/blog/tag/idea/</li> 
    <li>Or follow me on Twitter:&nbsp;<a href="http://twitter.com/hamletdrc">@HamletDRC</a> </li> 
</ul> 
<p>Phew, that's a lot of self-promotion :) </p> 

<p>The screencast was created with Ubuntu 10.04, PiTiVi, Audicity, gtk-RecordMyDesktop, IntelliJ IDEA, and LibreOffice. OS from top to bottom. 

<p>Thanks for watching, and leave a comment!&nbsp;</p> 





Blogpost: 
---------


Tweet: 
------

http://tv.jetbrains.net/videocontent/spock-and-mock-object-basics
<object width="800" height="600" id="_ipad" data="http://tv.jetbrains.net/flowplayer/flowplayer-3.2.7.swf" type="application/x-shockwave-flash"><param name="movie" value="http://tv.jetbrains.net/flowplayer/flowplayer-3.2.7.swf" /><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="flashvars" value='config={"clip":{"scaling":"orig","autoPlay":false,"autoBuffering":true,"url":"/sites/default/files/videos/converted/spockmocking.mp4"},"plugins":{"controls":{"stop":true}},"playlist":[{"scaling":"orig","autoPlay":false,"autoBuffering":true,"url":"http://tv.jetbrains.net/sites/default/files/videos/converted/spockmocking.mp4"}]}' /></object>




<p>This screencast demonstrates how to use <a href="http://code.google.com/p/spock/">Spock testing</a> specifications and Groovy for mocking and stubbing behavior in unit tests. It covers creating the mock object syntax, setting expectations, verifying and spying on results, and argument matchers.&nbsp;</p>
<p>&nbsp;</p>

<p>This screencast demonstrates how to use&nbsp;<a href="http://code.google.com/p/spock/">Spock testing</a>&nbsp;specifications and Groovy for mocking and stubbing behavior in unit tests. It covers creating the mock object syntax, setting expectations, verifying and spying on results, and argument matchers.</p>
<p>Here are some useful links to read for this webcast:</p>
<ul>
    <li>Spock Framework - <a href="http://code.google.com/p/spock/">http://code.google.com/p/spock/ </a></li>
    <li>Spock Basics Screencast: <a href="http://tv.jetbrains.net/videocontent/ffff">http://tv.jetbrains.net/videocontent/ffff </a></li>
    <li>Mocks and Stubs aren't Spies: <a href="http://hamletdarcy.blogspot.com/2007/10/mocks-and-stubs-arent-spies.html">http://hamletdarcy.blogspot.com/2007/10/mocks-and-stubs-arent-spies.html </a></li>
    <li>Mocking with Spocks: <a href="http://www.canoo.com/blog/2010/04/20/spock-and-test-spies-a-logical-choice/">http://www.canoo.com/blog/2010/04/20/spock-and-test-spies-a-logical-choice/</a></li>
</ul>
<p>I've made a lot of screencasts and blog posts over the years. If you like this, then there are many ways to see the other stuff I've done:&nbsp;</p>
<ul>
    <li>My main blog:&nbsp;<a href="http://hamletdarcy.blogspot.com">http://hamletdarcy.blogspot.com</a></li>
    <li>My other JetBrains.tv posts:&nbsp;<a href="http://tv.jetbrains.net/tags/hamlet">http://tv.jetbrains.net/tags/hamlet</a></li>
    <li>IDEA&nbsp;related posts on my blog:&nbsp;<a href="http://hamletdarcy.blogspot.com/search/label/IDEA">http://hamletdarcy.blogspot.com/search/label/IDEA</a></li>
    <li>My screencasts on YouTube:&nbsp;<a href="http://www.youtube.com/user/HamletDRC">http://www.youtube.com/user/HamletDRC</a></li>
    <li>IDEA related Posts on my work blog:&nbsp;<a href="http://www.canoo.com/blog/tag/idea/">http://www.canoo.com/blog/tag/idea/</a></li>
    <li>Or follow me on Twitter:&nbsp;<a href="http://twitter.com/hamletdrc">@HamletDRC</a></li>
</ul>
<p>Phew, that's a lot of self-promotion :)</p>
<p>The screencast was created with Ubuntu 10.04, PiTiVi, Audicity, gtk-RecordMyDesktop, IntelliJ IDEA, and LibreOffice. OS from top to bottom.</p>
<p>Thanks for watching, and leave a comment!&nbsp;</p>


